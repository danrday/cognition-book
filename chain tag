## Chain

To manage the life-cycles of an entire array of *cogs*, one can use the *chain* tag. It is inspired heavily by D3.js's system of mapping DOM nodes to discrete data elements with enter, update and exit events.

With *chains*, a series of cogs based on one url are mapped to the keys (or indices) of a source array of data. Data is injected into each via the *chain's* item attribute.

Other options can help to control how these *cogs* are layered and applied to the DOM.

### Chain Tag Examples

```html
<chain find="body" source="records" item="rec" url="row.html" prop="true" depth="true" />
<chain find="holder" url="COMBO_BOX" source="prop filters" item="config filter" />
<chain find="list" url="list.html" path="LAYOUTS" source="cats" item="item" key="cat_id" />
<chain find="content" source="people" item="prop dude" url="guy.html" build="sort" />
<chain find="blogroll" source="run getBloggers" url="blogger.html" order="true" />
```

### Chain Tag Attributes

|Name | Description | Required? | Types |
|-----------|--------------|-----------|-----------|
|find| The DOM element id used as placeholder by the *chain*. | Yes | none |
|-----------|--------------|-----------|-----------|
|url|  A relative or absolute path to a file containing a *cog* definition with at least a display declaration. Used by every *cog* in the chain. | Yes | none |
|-----------|--------------|-----------|-----------|
|path|  A directory used as a prefix for the *url* attribute. It can be an actual path or the name of another *alias* defined previously. | No | none |
|-----------|--------------|-----------|-----------|
|source|  The data source used to construct the chain; it should resolve to an array. By default, it senses changes to a named *data* tag. | Yes | *data*, prop, run, config |
|-----------|--------------|-----------|-----------|
|item|  The data item created within each cog created from the source array. By default, it builds a *data* tag named 'item' that is wired back to the source data. | No | *data* 'item', prop, run, config |
|-----------|--------------|-----------|-----------|
|key|  A way to identify data elements that persist across source changes. An item's index in the source array is used by default. An object property name or a method to compute a key can be used as key values. | No | *index*, string, prop, run, config |
|-----------|--------------|-----------|-----------|
|build|  By default, build is set to 'append', and will append new elements into the *chain's* container. Use 'scratch' to destroy and rebuild with each change to the data source. Or use 'sort' to rearrange nodes to match their order in the source array. | No | none |
|-----------|--------------|-----------|-----------|
|order|  If set to 'true', the order flag will apply the CSS order style on each *cog* in the *chain* using the source array's index values. | No | none |
|-----------|--------------|-----------|-----------|
|depth|  If set to 'true', the depth flag will apply the CSS z-index style on each *cog* in the *chain* using the source array's index values.  | No | none |
|-----------|--------------|-----------|-----------|

