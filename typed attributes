# Typed Attributes

Some tag attributes support a type prefix to allow for more complexity (or even clarity). Typed attribute values are preceded by a type name and a space. 

## data

*Data* types provide the name of a *data* location. The attribute is bound to the *data's* value via *sensors* that are automatically setup in the background.

For instance, a *cog* can load various URLs dynamically by using a *url* attribute typed as *data*.

```html
<cog find="holder" url="data currentPage" />
```

In this case, the DOM element with an *id* of *holder* would always contain a *cog* whose URL was obtained from a *data* tag named currentPage. If the value of currentPage changed, a new *cog* would be loaded, replacing the prior one, using the string value of currentPage as its URL.

## config

A *config* attribute will be resolved upon instantiation and does not respond to changes; it's a once and done setup variable.

```html
<cog find="someDiv" url="config currentPage" />
```

In this example, the 'url' will be set to whatever string is contained within the *config* option named currentPage. It will not respond to later changes in the *config* setting.

## string

The *string* type simply specifies that the following value will be treated as a raw string. 
For *cogs*, the default type for the 'url' attribute is 'string'.

```html
<cog find="div_one" url="cats_of_the_world.html" />
<cog find="div_two" url="string cats_of_the_world.html" />
```

These example statements are thus equivalent. They would both load 'cats_of_the_world.html' with the full path being relative to the location of the *cog* file containing this code.

## prop

The *prop* type reads a property from the current *cog's* script declaration. This is done only once at instantiation and does not respond to later updates.

```html
<data name="appSettings" value="prop defaultSettings" />
```

*Data* tags can use the *prop* type to easily initialize complex values such as objects or arrays.

## run

The *run* type executes a function declared in the current *cog's* script declaration. This is done only once at instantiation and does not respond to later updates.

```html
<cog find="holder" url="run getCatPage" />
```

This *cog* would resolve its 'url' based on the result of calling the function 'getCatPage' -- which should be a method on the current *cog* that returns a string.

```html
<data name="lastUser" value="run getLastUser" />
```

Likewise, *data* tags can run a function to set their initial value.

## number

The *number* type attempts to cast and store a value as a Javascript Number. 

```html
<data name="retryCount" value="number 3" />
<data name="roughlyE" value="number 2.718" />
```

Most attributes would store the number as a 'string' without this specification.

## boolean

The *boolean* type results in a stored boolean value of true or false. It expects strings of 'true' or 'false' as inputs.

```html
<data name="isBigScreen" value="bool true" />
<data name="isSmallScreen" value="bool false" />
```

Note: This is generally not needed -- see the *auto* type.

## index

The *index* type signifies that an array index will be used and requires no further naming specifics.
It is currently only used as a default setting for the *key* attribute in *chain* tags.

## auto

The *auto* type stores most values as strings but will convert 'true', 'false' and 'null' to their non-string counterparts; this is the default type for the value attribute of *data* tags.

```html
<data name="isBigScreen" value="true" />
<data name="isSmallScreen" value="false" />
<data name="selectedTV" value="null" />
```

Note: to store these values explicitly as strings, use 'string true', 'string false' or 'string null'.

 


 

