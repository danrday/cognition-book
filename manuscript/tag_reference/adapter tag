## Adapter

T> The adapter tag is key if you want to make reusable, configurable components for general use.

The adapter tag acts like a data tag that has been dynamically wired to another data tag above it in the component tree.
The control attribute determines the direction of the binding. If set to control, any writes made to the local adapter
will be automatically relayed to the higher data tag. If not in control, the adapter will watch the higher data tag, mirroring its value.

The basic idea is that you can provide the name of an external data tag via configuration while the code in your cog file works with
local data tags to allow generic implementations.




### Adapter Tag Examples

```html
<adapter name="records" />
<adapter name="display" field="buttonValue" />
<adapter name="action" field="buttonCmd" control="true" />
<adapter name="color" optional="true" />
<adapter name="list" field="recordSource" item="config" />
```

### Alias Tag Attributes

name*
: Name to reference. [*string*]

item
: Name of the data tag holding the configuration object for the adapter.
  Defaults to the injected item (if present) from the item attribute of the parent cog. [*string*]

field
: Looks for this property on the configuration object, which should be the name of the
  higher data tag to follow or control. Defaults to the value of the name attribute. [*string*, read, prop, run]

control
: Will forward all writes to a higher data tag (default is to mirror its value). [*bool*]

optional
: Silently fails if no valid higher data tag is found when initialized. [*string*]


------