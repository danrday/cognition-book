## Chain

TLDR
: Chains create arrays of cogs based on a common url.


A series of cogs are created based on one url.

They are mapped to the keys (or indices) of a source array of data via the source attribute.

Data is injected into each via child cog via the chain's item attribute.

Other options can help to control how these cogs are layered and applied to the DOM.

### Chain Tag Examples

```html
<chain node="body" source="records" item="record" url="row.html" />
<chain node="holder" source="prop filters" item="prop filter" url="COMBO_BOX" />
<chain node="list" source="cats" path="LAYOUTS" url="list.html" key="cat_id" />
<chain node="blogroll" source="run getBloggers" url="blogger.html" />
```

### Chain Tag Attributes

node*
: Node in the display in which to put the chain. [*string*]

url*
: Relative file path, absolute file path or alias name.
  Resolves to file containing a cog definition that implements a display declaration
  (and possibly script or blueprint declarations).
  [*string*, data, prop, run, read]

path
: Relative or absolute directory path, prepended to the url. Can be another alias defined previously. [*string*]

source
: External data source (must resolve to an array) for configuration. [*data*, prop, run, read]

item
: Internal data source created within each cog of the chain (using source). [*data* itemData, prop, run, read]

name
: Name to reference (for routes). [*string*]

route
: Indicates a namespace (named after the chain) for data tags. [*boolean*]

route
: Indicates a namespace (named after the chain) for data tags. [*boolean*]

key
: A way to identify data elements that persist across source changes. An item's index in the source array is used by default.
  An object property name or a method to compute a key (function(data) { ... return key; } can be used as key values.
  [*index*, string, prop, run, read]

------

