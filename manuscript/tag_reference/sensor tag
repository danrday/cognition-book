## Sensor

T> The event bindings that watch, move and transform data throughout an application.

Sensors are configurable subscriptions to data tags (or DOM nodes, indirectly).

They are configurable , acting as subscription instances that can gather, filter, transform and emit message data.Ã‚

Using the 'watch' and/or 'need' attributes, **sensors** can monitor **data** locations by name. **Sensors** search for each **data** location in turn, checking the current **cog** and then walking up the **cog** hierarchy until a match is found. Note: the search pattern can be modified using the 'where' attribute. 

With the 'node' attribute, a **sensor** can listen for DOM events on a nodeÃ‚ with a matching 'id' attribute in the **cog's display** declaration. Specify the event (such as 'click' or 'mouseup') using the 'on' attribute.

### Sensor Tag Examples

```html

<sensor watch="records" run="render" />
<sensor watch="records, filters" run="render"  />
<sensor watch="dataService" on="error" pipe="errorAlert" />
<sensor watch="config" need="user" transform="toNextPage" pipe="activePage" />

```

### Sensor Message Lifecycle

When a sensor tag receives a message, it goes through the following series of steps in order to process it.

 1. Check Enabled: If the sensor has been deactivated (dropped), the message is silently aborted.
 2. Gather: The values of any data locations to 'gather' are bundled into a hash of values by source name, augmenting the original message data.
 3. Extract: A property plucked from the message (which then replaces the message).
 4. Conform: A functor to modify or replace the incoming message (before change or filters are applied).
 5. Change: If 'change' is true, the message will silently abort if it equals (===) the last message seen (at this point in the process).
 6. Filter: If present, a filter function is called with arguments (message, topic, source) and will continue if true is returned.
 7. Batch and Group: If 'batch' or 'group' attributes are defined, the sensor will begin bundling messages in a list or hash, respectively.
 8. Transform:  The 'transform' attribute acts as a functor to modify or replace the outgoing message.
 9. Emit: The 'emit' attribute acts as a functor to modify or replace the outgoing topic.
 10. Queue: The message is either sent directly or queued for delivery on flush (invoked manually or by the next cycle of the event loop).
 11. Cmd: If the sensor was generated by a command tag, it will not fire until a message from the command data tag has occurred.


### Sensor Tag Attributes

#### Input Related

watch (1)
: A list of names referring to named data tags that the sensor will subscribe to.
  If multiple names are listed, the underlying bus will automatically merge and batch them.
  Anything listed in the 'need' attribute is added to the watch list as a union of the two (distinct by tag, i.e. no duplicate subscriptions).
  [string (comma delimited)]

need (1)
: The 'need' attribute subscribes to data tags just like the 'watch' attribute, but prevents the sensor from firing (via 'run' or 'pipe')
  until it has received data from every listed tag. [string (comma delimited)]

node (1)
: Finds a node by id in the cog's display declaration and listens for the event specified by the 'on' attribute.
  Use the 'node' attribute in lieu of the 'watch' and 'need' attributes.
  The message passed via run or pipe will be the associated event object. [string]

on
: If the sensor is watching data tags using 'watch' and/or 'need', the 'on' attribute specifies a topic on the data tag.
  Generally, the default setting of 'update' should suffice. Use '*' (wildcard) to subscribe to all topics on the data tag at once.

  For sensors using the 'node' attribute, 'on' should be set to a DOM event name, such as 'click' or 'mouseover'. [string]

optional
: Makes subscriptions optional such that missing data tags in the 'watch' or 'need' attributes
  will simply be ignored (as opposed to throwing errors). [bool]

where
: Where to search for data tag name(s) used by 'need', 'watch' or 'gather'. [*first*, parent, outer, last, in (cog or alloy name)]

  'first'
  : looks locally and goes up the cog tree, returning the first match.

  'parent'
  : like 'first' but skips the current cog.

  'outer'
  : returns the second match found.

  'last'
  : returns the highest, final match in the cog hierarchy.

  'in (name)'
  : finds with 'first' cog or alloy with a matching name and returns a matching data tag within it


conform
: Name of the function (in the script declaration) used to modify the incoming message.
  Note that this runs after 'gather' and 'extract' attribute operations.
  The function should accept three arguments: message, topic and source and runs with 'this' set to the script instance.
  It should return the new message value. [string]

filter
: Name of the function (in the script declaration) to use as a filter against the message.
  Note that this runs after 'gather', 'extract' and 'conform' attribute operations.
  The function should accept three arguments: message, topic and source and runs with 'this' set to the script instance.
  It should return true in order to continue processing the data.
  If the filter method returns false, the incoming data will be silently ignored. [string]

#### Output Related

to
: Where to search for the data tag name used by 'pipe'.
  See 'where' for option info. [*first*, parent, outer, last, in (cog or alloy name)]

pipe (2)
: When the sensor fires, writes to the data tag found with the name specified by 'pipe' (and using the 'to' attribute). [string]

run (2)
: Name of the function (in the script declaration) to run as an output or side effect when the sensor fires.
  The function should accept three arguments: message, topic and source and runs with 'this' set to the script instance.
  The message argument contains the data being transferred and is typically the only argument needed. [string]

toggle (2)  (*deprecated*: this feature will move to the data tag in the future).
: Name of the data tag to toggle (as a boolean) when the sensor fires.

transform
: Name of the function (in the script declaration) used to modify the outgoing message.
  The function should accept three arguments: message, topic and source and runs with 'this' set to the script instance.
  It should return the new message value. [string]

emit
: Name of the function (in the script declaration) used to modify the outgoing topic.
  The function should accept three arguments: message, topic and source and runs with 'this' set to the script instance.
  It should return the new topic value.  [string]

once
: Fires only once. [bool]

change
: Files only if the incoming message value (after 'conform') has changed. [bool]

keep
: If 'batch' is true, the sensor keeps an internal history of messages received that it will process when the bus flushes.
  By default, it will pass along the 'last' message received when it fires.
  It can also pass the 'first' message seen, or even an array containing 'all' messages received between flushes. [*last*, first, all]

batch
: When data is received, the sensor will note it but not fire until the bus is flushed (which occurs via requestAnimationFrame).
  Data stored is based on the 'keep' attribute.
  Sensors watching multiple data tags 'batch' automatically. [bool]

group
: When data is received, the sensor will note it but not fire until the bus is flushed (which occurs via requestAnimationFrame).
  Sensors watching multiple data tags 'group' automatically, outputting a message object keyed by data tag (source) name. [bool]

------

1) All sensors require something to watch (some input source), be it a DOM 'node' or data tag(s).
2) All sensors should produce an output; they can 'run' a method defined in their cog's script declaration or 'pipe' messages to another data tag.

